This syntactic form is further recognisable by machine, meaning that with appropriate software,
we could order such values in ascending or descending order, extract the year, and so forth.

Most practical data models for graphs allow for defining nodes that are datatype values. RDF
utilises XML Schema Datatypes (XSD) [386], amongst others, where a datatype node is given as a
pair (J, d) where 1 is a lexical string, such as "2020-03-29T20: 00:00", and d is an IRI denoting the
datatype, such as xsd: dateTime. The node is then denoted (2020-03-29T20:00:00"**xsd:dateTime), Datatype
nodes in RDF are called literals and are not allowed to have outgoing edges. Other datatypes
commonly used in RDF data include xsd: string, xsd: integer, xsd: decimal, xsd: boolean, etc.
In case that the datatype is omitted, the value is assumed to be of type xsd: string. Applications
built on top of RDF can then recognise these datatypes, parse them into datatype objects, and apply
equality checks, normalisation, ordering, transformations, casting, according to their standard
definition. In the context of property graphs, Neo4j [332] also defines a set of internal datatypes on
property values that includes numbers, strings, booleans, spatial points, and temporal values.

3.2.4 Lexicalisation. Global identifiers for entities will sometimes have a human-interpretable
form, such as (chileSantiago), but the identifier strings themselves do not carry any formal semantic
significance. In other cases, the global identifiers used may not be human-interpretable by design.
In Wikidata, for instance, Santiago de Chile is identified as , where such a scheme has the
advantage of providing better persistence and of not being biased to a particular human language.
For example, the Wikidata identifier for Eswatini ( )) was not affected when the country
changed its name from Swaziland, and does not necessitate choosing between languages for creating
(more readable) IRIs such as (wd:Eswatini) (English), (wd:eSwatini) (Swazi), (w4:Esuatini) (Spanish), etc.

Since identifiers can be arbitrary, it is common to add edges that provide a human-interpretable
label for nodes, such as (w4:Q2887)-rdfs:label-> indicating how people may refer to the subject
node linguistically. Linguistic information of this form plays an important role in grounding
knowledge such that users can more clearly identify which real-world entity a particular node in a
knowledge graph actually references [115]; it further permits cross-referencing entity labels with
text corpora to find, for example, documents that potentially speak of a given entity [317]. Labels

can be complemented with aliases (e.g., (w4:02887)-skos:altLabel—» (Santiago de Chile”)) or comments (e.g.
(wd:Q2887)}-rdfs:comment-—» (Santiago is the capital of Chile”)) to further help ground the node’s identity.

Nodes such as (‘ ") denote string literals, rather than an identifier. Depending on the
specific graph model, such literal nodes may also be defined as a pair (s,1), where s denotes
the string and / a language code; in RDF, for example we may state (chile:City)-rdfs:label-»(City’@en),
(chile:City)-rdfs:label->(Ciudad’@es), etc., indicating labels for the node in different languages. In other
models, the pertinent language can rather be specified, e.g., via metadata on the edge. Knowl-
edge graphs with human-interpretable labels, aliases, comments, etc., (in various languages) are
sometimes called (multilingual) lexicalised knowledge graphs [53].

 

 

 

 

 

 

 

3.2.5 Existential nodes. When modelling incomplete information, we may in some cases know
that there must exist a particular node in the graph with particular relationships to other nodes,
but without being able to identify the node in question. For example, we may have two co-located
i 43) whose venue has yet to be announced. One option is to simply omit
the venue edges, in which case we lose the information that these events have a venue and that
both events have the same venue. Another option might be to create a fresh IRI representing the

 

venue, but semantically this becomes indistinguishable from there being a known venue. Hence
some graph models permit the use of existential nodes, represented here as a blank circle:

chile:EID42 }—chile:venue—>(_)-<—chile:venue-{ chile:E1D43